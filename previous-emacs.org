#+Title: My Emacs Configuration
#+Author: J. Dylan White
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes :results silent

* To Do

** TODO Add a "last modified" file property for org-mode
** TODO Configure IDE settings
** TODO Configure OrgRoam settings
** DONE Set up projectile
CLOSED: [2022-09-23 Fri 18:15]
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-09-23 Fri 18:15]
:END:
** DONE Set up ESS
CLOSED: [2022-09-23 Fri 21:14]
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-09-23 Fri 21:14]
:END:
** TODO Add org-superstar-mode
** TODO Change theme based on WM
- parse wmctrl -m output
** TODO Add use-package description

* Welcome!

I've made this configuration largely with the help of David Wilson's [[https://systemcrafters.cc/emacs-from-scratch/][Emacs From Scratch]] series. I think it's a good place to begin, and my own additions will slowly get included here.

This Org-Mode file generates a [[file:init.el][init.el]] file which is loaded by Emacs on start up. Let's add a note for this at the top of the file.

#+begin_src emacs-lisp

  ;; init.el is generated from emacs.org, so if you wish to make changes
  ;; to init.el, please do so within the emacs.org file and those changes
  ;; will be automatically generated here after saving emacs.org!

#+end_src

* Startup Performance

Increase the garbage collection threshold up from the 800 KB, then display the startup time and number of garbage collections.

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Display the number of garbage collections and startup time
  (defun my/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  ;; Show time after Emacs startup
  (add-hook 'emacs-startup-hook #'my/display-startup-time)

#+end_src

* Set Up System Packages

We need to point the package repositories for Emacs to install from. Additionally, Emacs has it's own package manager built in, but [[https://github.com/jwiegley/use-package][use-package]] is a slightly better package manager that will allow us to automate installation and configuration.

#+begin_src emacs-lisp

  ;; Load the package feature
  (require 'package)

  ;; Specify the package sources
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  ;; Load and initialize Emacs Lisp packages
  (package-initialize)

  ;; Refresh non-archived contents
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  ;; Load use-package
  (require 'use-package)

  ;; Treat every package as though it had specified :ensure
  (setq use-package-always-ensure t)

#+end_src

#+begin_src emacs-lisp

  ;;; Save & shutdown when we get an "end of session" signal on dbus 
  (require 'dbus)

  (defun my-register-signals (client-path)
    "Register for the 'QueryEndSession' and 'EndSession' signals from
    Gnome SessionManager.

    When we receive 'QueryEndSession', we just respond with
    'EndSessionResponse(true, \"\")'.  When we receive 'EndSession', we
    append this EndSessionResponse to kill-emacs-hook, and then call
    kill-emacs.  This way, we can shut down the Emacs daemon cleanly
    before we send our 'ok' to the SessionManager."
    (setq my-gnome-client-path client-path)
    (let ( (end-session-response (lambda (&optional arg)
                                   (dbus-call-method-asynchronously
                                    :session "org.gnome.SessionManager" my-gnome-client-path
                                    "org.gnome.SessionManager.ClientPrivate" "EndSessionResponse" nil
                                    t "") ) ) )
      (dbus-register-signal
       :session "org.gnome.SessionManager" my-gnome-client-path
       "org.gnome.SessionManager.ClientPrivate" "QueryEndSession"
       end-session-response )
      (dbus-register-signal
       :session "org.gnome.SessionManager" my-gnome-client-path
       "org.gnome.SessionManager.ClientPrivate" "EndSession"
       `(lambda (arg)
          (add-hook 'kill-emacs-hook ,end-session-response t)
          (kill-emacs) ) ) ) )

  ;; DESKTOP_AUTOSTART_ID is set by the Gnome desktop manager when emacs
  ;; is autostarted.  We can use it to register as a client with gnome
  ;; SessionManager.
  (dbus-call-method-asynchronously
   :session "org.gnome.SessionManager"
   "/org/gnome/SessionManager" 
   "org.gnome.SessionManager" "RegisterClient" 'my-register-signals
   "Emacs server" (getenv "DESKTOP_AUTOSTART_ID"))

  ;; Include environment variables
  (use-package exec-path-from-shell
    :config
    (dolist (var '("PATH" "SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO"
                   "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH" "XAUTHORITY"))
      (add-to-list 'exec-path-from-shell-variables var))
    (exec-path-from-shell-initialize))

#+end_src

** Automatic Package Updates

The [[https://github.com/rranelli/auto-package-update.el][auto-package-update]] package allows to automatically keep Emacs packages up to date. After a number of days specified by =auto-package-update-interval=, or at a specific time of data specified by =auto-package-update-at-time=, you will be prompted to update your installed Emacs packages. You can also use =M-x auto-package-update-now= to update your packages whenever you choose!

#+begin_src emacs-lisp

  ;; Use auto-package-update to automatically prompt for package updates
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Keep Folders Clean

With the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package, we can keep folders where we edit files and typically get those =*~= auto-save files and the Emacs configuration folder clean.

#+begin_src emacs-lisp

  ;; Use no-littering to keep folders clean
  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place auto save
  ;; files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* User Interface Configuration

Here we make some general configuration tweaks to the user interface, such as  transparency, hiding away menus and scrollbars, etc..

#+begin_src emacs-lisp

  ;; Use pixel wise frame size
  (setq frame-resize-pixelwise t)

  ;; Make frame transparency overridable
  (defvar my/frame-transparency '(95 . 95))

  ;; Don't show the startup message
  (setq inhibit-startup-message t)

  ; Disable visible scrollbar
  (scroll-bar-mode -1)

  ; Disable the toolbar
  (tool-bar-mode -1)

  ; Disable tooltips
  (tooltip-mode -1)

  ; Give some breathing room
  (set-fringe-mode 10)

  ; Disable the menu bar
  (menu-bar-mode -1)   

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; Enable column and line number modes
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha my/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,my/frame-transparency))

  ;; Start in full screen
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and fonts.

*NOTE:* The font size will likely need to change from system to system.

#+begin_src emacs-lisp

  ;; Specify the font size
  (defvar my/default-font-size 110)
  (defvar my/default-variable-font-size 120)
  (defvar my/default-variable-font-weight 'regular)

  ;; Set font faces
  (defun my/set-font-faces ()

    ;; Set the default face
    (set-face-attribute 'default nil
                        :font "Fira Code Retina"
                        :height my/default-font-size)

    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil
                        :font "Fira Code Retina"
                        :height my/default-font-size)

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil
                        :font "Fira Code Retina"
                        :height my/default-variable-font-size
                        :weight my/default-variable-font-weight)

    ;; Make commented text and keywords italics.
    ;; Your font must have an italic face available.
    (set-face-attribute 'font-lock-comment-face nil
                        :slant 'italic)
    (set-face-attribute 'font-lock-keyword-face nil
                        :slant 'italic))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)

  ;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
  (add-to-list 'default-frame-alist '(font . "Fira Code Retina-11"))

  ;; Changes certain keywords to symbols, such as lamda!
  (setq global-prettify-symbols-mode t)

  ;; Call font face function differently if using daemon
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame
                    (my/set-font-faces))))
    (my/set-font-faces))

#+end_src

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes, and the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] can help decide without manually booting up each theme to decide. You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

  ;; Use the Doom One theme from doom-themes and apply the doom theme visual bell
  (use-package doom-themes
    :init (load-theme 'doom-dracula t)
    (doom-themes-visual-bell-config))

#+end_src

** Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run =M-x all-the-icons-install-fonts= so that mode line icons display correctly.

#+begin_src emacs-lisp

  ;; Use all-the-icons to view symbols in the modeline
  (use-package all-the-icons)

  ;; Use doom-modeline for a prettier modeline
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom ((doom-modeline-height 30)
             (doom-modeline-icon t)))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

** Ivy, Counsel, and Swiper

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][Ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  ;; Load ivy for completion framework
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  ;; Load ivy-rich for additions to Counsel commands
  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  ;; Use helpful to add more information to describe-* commands
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Dashboard

When I breifly used Doom Emacs, I liked the feel of opening Emacs to a dashboard, so let's set one up for our vanilla Emacs config as well! [[https://github.com/emacs-dashboard/emacs-dashboard][Emacs Dashboard]] has great info about how to get started with a configuration.

*** TODO loading the agenda causes org-agenda files to be in the recents list

#+begin_src emacs-lisp

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    (setq dashboard-banner-logo-title "Welcome to Emacs!")
    (setq dashboard-startup-banner '1)
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents  . 5)                            
                            (projects . 5)
                            (agenda . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-init-info t)
    )

 #+end_src

* Keybinding Configuration

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; Use evil for vi-overlay
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    ;; Set some initial states to normal
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  ;; Automatically configure some vi bindings
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

The =my/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  ;; Function to call for specifying org-mode fonts
  (defun my/org-font-setup ()

    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.1)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.1)
                    (org-level-4 . 1.1)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Fira Code Retina" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)

    ;; Change LaTeX font size
    (setq org-format-latex-options (plist-put org-format-latexptions :scale 1.5)))
  
#+end_src

** Basic Config

This section contains the basic configuration for =org-mode=.

#+begin_src emacs-lisp

  ;; Function for basic org-mode setup
  (defun my/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  ;; Load the org package
  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . my/org-mode-setup)
    :config

    ;; Specify elipsis symbol
    (setq org-ellipsis " ▾")

    ;; Change org-mode logging
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    ;; Specify files to build org-agenda
    (setq org-agenda-files
          '("~/Documents/Org/birthdays.org"
            "~/Documents/Org/events.org"
            "~/Documents/Org/inbox.org"
            "~/Documents/Org/todo.org"))

    ;; Exclude org-agenda-files from recentf
    (add-to-list 'recentf-exclude "~/Documents/Org/birthdays.org")
    (add-to-list 'recentf-exclude "~/Documents/Org/events.org")
    (add-to-list 'recentf-exclude "~/Documents/Org/inbox.org")
    (add-to-list 'recentf-exclude "~/Documents/Org/todo.org")


    ;; Track habits with org-habit
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    ;; Customize todo keywords
    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "EVENT(e)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    ;; Customize tags
    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("music" .?m)
         ("game" .?g)
         ("chore" .?c)
         ("idea" . ?i)))

    ;; Place org agenda tags column
    (setq org-agenda-tags-column 0)

    ;; Only one space after a tag
    (setq org-tags-column 0)

    ;; Prefer to load org-agenda vertically
    (defadvice org-agenda (around split-vertically activate)
      (let ((split-width-threshold 50))  ; or whatever width makes sense for you
        ad-do-it))

    ;; Set up org-mode fonts
    (my/org-font-setup))

#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.

#+begin_src emacs-lisp

  ;; Use nicer looking bullets for org-mode
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :config
    (setq org-hide-leading-stars t)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  ;; Specify visual-fill centering settings
  (defun my/org-mode-visual-fill ()
    (setq visual-fill-column-width 120
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  ;; Use visual-fill-column to center org-mode buffers
  (use-package visual-fill-column
    :hook (org-mode . my/org-mode-visual-fill))

#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  ;; Specify org-babel languages
  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
          (python . t)
          (R . t)
          (lua . t)
          (shell . t)))
    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  ;; Apply structure templates to quickly insert code blocks in org files
  (with-eval-after-load 'org

    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    ;; Specify structure templates
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("r" . "src R"))
    (add-to-list 'org-structure-template-alist '("lua" . "src lua")))

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =my/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is in the directory =~/.dotfiles/=, and if so, tangles the file to the file path specified in the header arguments for the code block to tangle.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun my/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name "~/.dotfiles/"))

      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  ;; Run the function after saving
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config)))

#+end_src

** Org-Roam

[[https://github.com/org-roam/org-roam][Org Roam]] is an Org Mode extension inspired by [[https://roamresearch.com/][Roam]] and the [[https://www.orgroam.com/manual.html#A-Brief-Introduction-to-the-Zettelkasten-Method][Zettelkasten]] note-taking approach. I particularly like it because it solves the problem of organizing Org files, which has completely stopped several projects or throughts in their tracks before. With this approach, you just make the file, get your thoughts out there, and then move on.

#+begin_src emacs-lisp

  ;; Set up org-roam
  (use-package org-roam
  :ensure t
  :custom
  (org-roam-directory "~/Documents/Org/OrgRoam")
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert))
  :config
  (org-roam-setup))

#+end_src

*** Org-Roam-UI

[[https://github.com/org-roam/org-roam-ui][Org-Roam-UI]] is a graphical front-end showing linkages for the Org-Roam files you've made.

#+begin_src emacs-lisp                

  ;; Load websocket, a dependency for Org-Roam-UI
  (use-package websocket
    :after org-roam)

  ;; Load and configure Org-Roam-UI
  (use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src

* Development
 
** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.

#+begin_src emacs-lisp

  ;; Specify where to search for projects
  (setq projectile-project-search-path '("~/Documents/Projects/" "~/Documents"))

#+end_src

** Languages

*** IDE Features with lsp-mode

**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy)

#+end_src

*** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.  Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp

  (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)

    :config
    ;; Set up Node debugging
    (require 'dap-node)
    (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    ;; Bind `C-c l d` to `dap-hydra` for easy access
    (general-define-key
      :keymaps 'lsp-mode-map
      :prefix lsp-keymap-prefix
      "d" '(dap-hydra t :wk "debugger")))

#+end_src

*** Lua

#+begin_src emacs-lisp

  ;; Install lua-mode
  (use-package lua-mode
    :defer 1
    :config

    ;; Better indenting, plus avoided double indents
    (setq lua-indent-nested-block-content-align nil)
    (setq lua-indent-close-paren-align nil)
    (defun lua-at-most-one-indent (old-function &rest arguments)
      (let ((old-res (apply old-function arguments)))
        (if (> old-res lua-indent-level) lua-indent-level old-res)))
    (advice-add #'lua-calculate-indentation-block-modifier
                :around #'lua-at-most-one-indent))

#+end_src

*** R

[[https://ess.r-project.org/][Emacs Speaks Statistics]] (ESS) is a great add-on built for handling a lot of statistical programs such as R, SAS, and Stata.

#+begin_src emacs-lisp

  (use-package ess
    :ensure t
    :init (require 'ess-site))
  
#+end_src

*** Python

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.

Make sure you have the =pylsp= language server installed before trying =lsp-mode=!

#+begin_src sh :tangle no

pip install --user "python-lsp-server"

#+end_src

There are a number of other language servers for Python so if you find that =pylsp= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp

  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python)
    (setq lsp-pyls-server-command "./.local/lib/python3.11/site-packages/pylsp")
    )

#+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp

 ;; (use-package pyvenv
 ;;   :config
 ;;   (pyvenv-mode 1))

#+end_src

** Anaconda

I use [[https://docs.conda.io/en/latest/miniconda.html][Miniconda]] for my Python and R environment and package management. To integrate it with Emacs, we can use the [[https://github.com/necaris/conda.el][conda]] package.

#+begin_src emacs-lisp

  ;; Configure conda for anaconda integration
  (use-package conda
    :init
    (setq conda-anaconda-home (expand-file-name "~/.miniconda"))
    (setq conda-env-home-directory (expand-file-name "~/.miniconda/")))

#+end_src

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom (projectile-completion-system 'ivy)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (setq projectile-project-search-path '("~/Documents/Projects"))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  ;; Configure magit for git integration
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src

** Git Gutter

I tried [[https://github.com/doomemacs/doomemacs][Doom Emacs]] recently and liked certain parts of it, especially the git gutter indicators to show added/deleted/modified code blocks that haven't been committed by git. I stumbled onto [[https://ianyepan.github.io/posts/emacs-git-gutter/][Ian Y.E. Pan's post]] showing off how to get this feature enabled, and here's what they came up with. I quite like it!

#+begin_src emacs-lisp
  
  (use-package git-gutter
    :hook (prog-mode . git-gutter-mode)
    :config
    (setq git-gutter:update-interval 0.02))

  (use-package git-gutter-fringe
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

#+end_src

** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  ;; Use better commenting
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  ;; Use rainbow colors for things like parentheses and brackets
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Rainbow Mode

[[https://elpa.gnu.org/packages/rainbow-mode.html][Rainbow Mode]] enables visualization of color codes in Emacs.

#+begin_src emacs-lisp

  (use-package rainbow-mode
    :hook prog-mode org-mode)

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
